<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.companion.mapper.GoodsMapper">

	<sql id="goodsColumnsBase">
	   goods_Num , goods_name , goods_price ,goods_content , delivery_cost , emp_num
	  ,goods_regist , goods_main_store ,goods_main_store_img , goods_images
	  ,goods_images_img , visit_count ,update_Emp_Num , goods_Update_Date, goods_category, goods_subcategory
	</sql>

	<resultMap type="com.example.companion.domain.GoodsDTO" id="goodsResultMap">
		<constructor>
		<idArg column="goods_Num" javaType="string"/>
		<arg column="goods_Name" javaType="string"/>
		<arg column="goods_Price" javaType="integer"/>
		<arg column="delivery_Cost" javaType="integer"/>
		<arg column="goods_Content" javaType="string"/>
		<arg column="emp_Num" javaType="string"/>
		<arg column="goods_category" javaType="string"/>
		<arg column="goods_subcategory" javaType="string"/>
		<arg column="visit_Count" javaType="integer"/>
		<arg column="goods_Regist" javaType="java.util.Date"/>
		<arg column="update_Emp_Num" javaType="string"/>
		<arg column="goods_Update_Date" javaType="java.util.Date"/>
		<arg column="goods_main_store" javaType="string"/>
		<arg column="goods_main_store_img" javaType="string"/>
		<arg column="goods_images" javaType="string"/>
		<arg column="goods_images_img" javaType="string"/>
	</constructor>
	</resultMap>

<select id="incomingAndGoodsAutoNum" resultType="string">
select
concat(#{sep}, coalesce(max(substr(${columnName},${seq}))::integer,1000000)+1)
from ${tableName}
</select>
<insert id="goodsInsert" parameterType="com.example.companion.domain.GoodsDTO">
insert into goods ( <include refid="goodsColumnsBase" /> )
values(#{goodsNum}, #{goodsName}, #{goodsPrice}, #{goodsContent}, #{deliveryCost}, #{empNum}, now()
		, #{goodsMainStore},#{goodsMainStoreImg}
	    <if test="goodsImages != null">, #{goodsImages}, #{goodsImagesImg}</if>
		<if test="goodsImages == null">, null ,null</if>
	    ,0,null,null,#{goodsCategory}, #{subCategory})
</insert>
<select id="allSelect" resultType="com.example.companion.domain.GoodsDTO" >
select * from (
	select ROW_NUMBER() over (order by goods_num desc) as rn,
		goods_Num goodsNum, goods_name goodsName, goods_price goodsPrice
		,goods_content goodsContent, delivery_cost deliveryCost, emp_num empNum
		,goods_regist goodsRegist, goods_main_store goodsMainStore
		,goods_main_store_img goodsMainStoreImg, goods_images goodsImages
		,goods_images_img goodsImagesImg, visit_count visitCount
		,update_Emp_Num updateEmpNum, goods_Update_Date goodsUpdateDate
	    ,goods_category goodsCategory, goods_subcategory subCategory
	from goods
	<where>
		<if test="searchWord != null">
			goods_name like '%' || #{searchWord} || '%'
            or goods_content like '%' || #{searchWord} || '%'
            or goods_category like '%' || #{searchWord} || '%'
            or goods_subcategory like '%' || #{searchWord} || '%'
		</if>
	</where>
)sub1
where rn between #{startRow} and #{endRow}
</select>
<select id="goodsCount" parameterType="string" resultType="integer">
	select count(*) from goods
	<where>
		<if test="searchWord != null">
			goods_name like '%' || #{searchWord} || '%'
            or goods_content like '%' || #{searchWord} || '%'
            or goods_category like '%' || #{searchWord} || '%'
            or goods_subcategory like '%' || #{searchWord} || '%'
		</if>
	</where>
</select>
<delete id="productsDelete" parameterType="string">
delete from goods
where goods_num in <foreach collection="products" item="goodsNum" open="(" close=")" index="index" separator=",">
					#{goodsNum}
					</foreach>
</delete>
<select id="selectOne" parameterType="string" resultMap="goodsResultMap">
select <include refid="goodsColumnsBase"/>
from goods
where goods_Num = #{goodsNum}
</select>

<update id="goodsUpdate" parameterType="com.example.companion.domain.GoodsDTO">
update goods
set GOODS_NAME = #{goodsName}, GOODS_PRICE = #{goodsPrice}
	,delivery_cost =#{deliveryCost}, GOODS_CONTENT = #{goodsContent}
    ,update_emp_num = #{updateEmpNum}, goods_update_date = now()
	,goods_category = #{goodsCategory}, goods_subcategory = #{subCategory}
	<if test="goodsMainStore != null">
	,goods_main_store = #{goodsMainStore}
	,goods_main_store_img = #{goodsMainStoreImg}
	</if>
	<if test="goodsImages != null">
	,goods_images = #{goodsImages}
	,goods_images_img = #{goodsImagesImg}
	</if>
where goods_num = #{goodsNum}
</update>

<delete id="goodsDelete" parameterType="string">
delete from goods
where goods_num = #{goodsNum}
</delete>

	<resultMap id="goodsStockResultMap" type="com.example.companion.domain.GoodsDetailStockDTO">
		<result column="stock" jdbcType="BIGINT" property="stock"/> <!-- 재고 -->
		<!-- 객체 내의 객체는 association으로 정의  -->
		<association property="goodsDTO" javaType="com.example.companion.domain.GoodsDTO" resultMap="goodsResultMap" />
	</resultMap>

<select id="goodsDetailStock" parameterType="string" resultMap="goodsStockResultMap">
<!-- 상품정보와 같이 가져오기  -->
select g.goods_num, goods_name, goods_price, goods_content, delivery_cost, emp_num,
	     goods_regist, goods_main_store, goods_main_store_img, goods_images,
		 goods_images_img, visit_count, update_emp_num, goods_update_date,goods_category, goods_subcategory
		 coalesce(tot,0) stock
from goods g left outer join (   <!-- 상품정보는 있지만 입고가 없어도 출력  -->
	<!-- 조인으로 입고수량 - 구매수량 = 재고수량 계산 쿼리, 구매수량 null일 시 0, 구매수량 없어도 입고수량이 있으면 출력 -->
	select ip.goods_num , iqty - coalesce(pqty,0) tot
		<!-- 입고수량 구하기 -->
	from(select goods_num, sum(incoming_qty) iqty
			from goodsincoming
			group by goods_num) ip left outer join
		<!-- 판매수량 구하기 -->
		(select goods_num, sum(purchase_qty) pqty
			from purchase_list
			group by goods_num) pl
	on ip.goods_num = pl.goods_num
) s
on g.goods_num = s.goods_num
where g.goods_num = #{goodsNum}
</select>

<update id="visitCount" parameterType="string">
update goods
set visit_count = visit_count + 1
where goods_num = #{goodsNum}
</update>
</mapper>